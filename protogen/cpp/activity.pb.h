// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: activity.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_activity_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_activity_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_activity_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_activity_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_activity_2eproto;
namespace activity_log {
class LogActivityRequest;
struct LogActivityRequestDefaultTypeInternal;
extern LogActivityRequestDefaultTypeInternal _LogActivityRequest_default_instance_;
class LogActivityResponse;
struct LogActivityResponseDefaultTypeInternal;
extern LogActivityResponseDefaultTypeInternal _LogActivityResponse_default_instance_;
}  // namespace activity_log
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace activity_log {
enum Status : int {
  Success = 0,
  Failed = 1,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Status_IsValid(int value);
extern const uint32_t Status_internal_data_[];
constexpr Status Status_MIN = static_cast<Status>(0);
constexpr Status Status_MAX = static_cast<Status>(1);
constexpr int Status_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
Status_descriptor();
template <typename T>
const std::string& Status_Name(T value) {
  static_assert(std::is_same<T, Status>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Status_Name().");
  return Status_Name(static_cast<Status>(value));
}
template <>
inline const std::string& Status_Name(Status value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Status_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Status_Parse(absl::string_view name, Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status>(
      Status_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class LogActivityResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:activity_log.LogActivityResponse) */ {
 public:
  inline LogActivityResponse() : LogActivityResponse(nullptr) {}
  ~LogActivityResponse() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LogActivityResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline LogActivityResponse(const LogActivityResponse& from) : LogActivityResponse(nullptr, from) {}
  inline LogActivityResponse(LogActivityResponse&& from) noexcept
      : LogActivityResponse(nullptr, std::move(from)) {}
  inline LogActivityResponse& operator=(const LogActivityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogActivityResponse& operator=(LogActivityResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogActivityResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogActivityResponse* internal_default_instance() {
    return reinterpret_cast<const LogActivityResponse*>(
        &_LogActivityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(LogActivityResponse& a, LogActivityResponse& b) { a.Swap(&b); }
  inline void Swap(LogActivityResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogActivityResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogActivityResponse* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<LogActivityResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogActivityResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LogActivityResponse& from) { LogActivityResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LogActivityResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "activity_log.LogActivityResponse"; }

 protected:
  explicit LogActivityResponse(::google::protobuf::Arena* arena);
  LogActivityResponse(::google::protobuf::Arena* arena, const LogActivityResponse& from);
  LogActivityResponse(::google::protobuf::Arena* arena, LogActivityResponse&& from) noexcept
      : LogActivityResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .activity_log.Status status = 1;
  void clear_status() ;
  ::activity_log::Status status() const;
  void set_status(::activity_log::Status value);

  private:
  ::activity_log::Status _internal_status() const;
  void _internal_set_status(::activity_log::Status value);

  public:
  // @@protoc_insertion_point(class_scope:activity_log.LogActivityResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      48, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_LogActivityResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LogActivityResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    int status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_activity_2eproto;
};
// -------------------------------------------------------------------

class LogActivityRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:activity_log.LogActivityRequest) */ {
 public:
  inline LogActivityRequest() : LogActivityRequest(nullptr) {}
  ~LogActivityRequest() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LogActivityRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline LogActivityRequest(const LogActivityRequest& from) : LogActivityRequest(nullptr, from) {}
  inline LogActivityRequest(LogActivityRequest&& from) noexcept
      : LogActivityRequest(nullptr, std::move(from)) {}
  inline LogActivityRequest& operator=(const LogActivityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogActivityRequest& operator=(LogActivityRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogActivityRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogActivityRequest* internal_default_instance() {
    return reinterpret_cast<const LogActivityRequest*>(
        &_LogActivityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(LogActivityRequest& a, LogActivityRequest& b) { a.Swap(&b); }
  inline void Swap(LogActivityRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogActivityRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogActivityRequest* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<LogActivityRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogActivityRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LogActivityRequest& from) { LogActivityRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LogActivityRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "activity_log.LogActivityRequest"; }

 protected:
  explicit LogActivityRequest(::google::protobuf::Arena* arena);
  LogActivityRequest(::google::protobuf::Arena* arena, const LogActivityRequest& from);
  LogActivityRequest(::google::protobuf::Arena* arena, LogActivityRequest&& from) noexcept
      : LogActivityRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 1,
    kTimeFieldNumber = 2,
    kDateFieldNumber = 3,
    kOsFieldNumber = 4,
    kActionFieldNumber = 5,
  };
  // string location = 1;
  void clear_location() ;
  const std::string& location() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_location(Arg_&& arg, Args_... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* value);

  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(
      const std::string& value);
  std::string* _internal_mutable_location();

  public:
  // string time = 2;
  void clear_time() ;
  const std::string& time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_time(Arg_&& arg, Args_... args);
  std::string* mutable_time();
  PROTOBUF_NODISCARD std::string* release_time();
  void set_allocated_time(std::string* value);

  private:
  const std::string& _internal_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time(
      const std::string& value);
  std::string* _internal_mutable_time();

  public:
  // string date = 3;
  void clear_date() ;
  const std::string& date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_date(Arg_&& arg, Args_... args);
  std::string* mutable_date();
  PROTOBUF_NODISCARD std::string* release_date();
  void set_allocated_date(std::string* value);

  private:
  const std::string& _internal_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date(
      const std::string& value);
  std::string* _internal_mutable_date();

  public:
  // string os = 4;
  void clear_os() ;
  const std::string& os() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_os(Arg_&& arg, Args_... args);
  std::string* mutable_os();
  PROTOBUF_NODISCARD std::string* release_os();
  void set_allocated_os(std::string* value);

  private:
  const std::string& _internal_os() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_os(
      const std::string& value);
  std::string* _internal_mutable_os();

  public:
  // string action = 5;
  void clear_action() ;
  const std::string& action() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action(Arg_&& arg, Args_... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* value);

  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(
      const std::string& value);
  std::string* _internal_mutable_action();

  public:
  // @@protoc_insertion_point(class_scope:activity_log.LogActivityRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      64, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_LogActivityRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LogActivityRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr location_;
    ::google::protobuf::internal::ArenaStringPtr time_;
    ::google::protobuf::internal::ArenaStringPtr date_;
    ::google::protobuf::internal::ArenaStringPtr os_;
    ::google::protobuf::internal::ArenaStringPtr action_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_activity_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LogActivityRequest

// string location = 1;
inline void LogActivityRequest::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.location_.ClearToEmpty();
}
inline const std::string& LogActivityRequest::location() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:activity_log.LogActivityRequest.location)
  return _internal_location();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogActivityRequest::set_location(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.location_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:activity_log.LogActivityRequest.location)
}
inline std::string* LogActivityRequest::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:activity_log.LogActivityRequest.location)
  return _s;
}
inline const std::string& LogActivityRequest::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.location_.Get();
}
inline void LogActivityRequest::_internal_set_location(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.location_.Set(value, GetArena());
}
inline std::string* LogActivityRequest::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.location_.Mutable( GetArena());
}
inline std::string* LogActivityRequest::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:activity_log.LogActivityRequest.location)
  return _impl_.location_.Release();
}
inline void LogActivityRequest::set_allocated_location(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.location_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.location_.IsDefault()) {
          _impl_.location_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:activity_log.LogActivityRequest.location)
}

// string time = 2;
inline void LogActivityRequest::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_.ClearToEmpty();
}
inline const std::string& LogActivityRequest::time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:activity_log.LogActivityRequest.time)
  return _internal_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogActivityRequest::set_time(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:activity_log.LogActivityRequest.time)
}
inline std::string* LogActivityRequest::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:activity_log.LogActivityRequest.time)
  return _s;
}
inline const std::string& LogActivityRequest::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_.Get();
}
inline void LogActivityRequest::_internal_set_time(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_.Set(value, GetArena());
}
inline std::string* LogActivityRequest::_internal_mutable_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.time_.Mutable( GetArena());
}
inline std::string* LogActivityRequest::release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:activity_log.LogActivityRequest.time)
  return _impl_.time_.Release();
}
inline void LogActivityRequest::set_allocated_time(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.time_.IsDefault()) {
          _impl_.time_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:activity_log.LogActivityRequest.time)
}

// string date = 3;
inline void LogActivityRequest::clear_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_.ClearToEmpty();
}
inline const std::string& LogActivityRequest::date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:activity_log.LogActivityRequest.date)
  return _internal_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogActivityRequest::set_date(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:activity_log.LogActivityRequest.date)
}
inline std::string* LogActivityRequest::mutable_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:activity_log.LogActivityRequest.date)
  return _s;
}
inline const std::string& LogActivityRequest::_internal_date() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.date_.Get();
}
inline void LogActivityRequest::_internal_set_date(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_.Set(value, GetArena());
}
inline std::string* LogActivityRequest::_internal_mutable_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.date_.Mutable( GetArena());
}
inline std::string* LogActivityRequest::release_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:activity_log.LogActivityRequest.date)
  return _impl_.date_.Release();
}
inline void LogActivityRequest::set_allocated_date(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.date_.IsDefault()) {
          _impl_.date_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:activity_log.LogActivityRequest.date)
}

// string os = 4;
inline void LogActivityRequest::clear_os() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.os_.ClearToEmpty();
}
inline const std::string& LogActivityRequest::os() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:activity_log.LogActivityRequest.os)
  return _internal_os();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogActivityRequest::set_os(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.os_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:activity_log.LogActivityRequest.os)
}
inline std::string* LogActivityRequest::mutable_os() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_os();
  // @@protoc_insertion_point(field_mutable:activity_log.LogActivityRequest.os)
  return _s;
}
inline const std::string& LogActivityRequest::_internal_os() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.os_.Get();
}
inline void LogActivityRequest::_internal_set_os(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.os_.Set(value, GetArena());
}
inline std::string* LogActivityRequest::_internal_mutable_os() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.os_.Mutable( GetArena());
}
inline std::string* LogActivityRequest::release_os() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:activity_log.LogActivityRequest.os)
  return _impl_.os_.Release();
}
inline void LogActivityRequest::set_allocated_os(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.os_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.os_.IsDefault()) {
          _impl_.os_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:activity_log.LogActivityRequest.os)
}

// string action = 5;
inline void LogActivityRequest::clear_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.ClearToEmpty();
}
inline const std::string& LogActivityRequest::action() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:activity_log.LogActivityRequest.action)
  return _internal_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogActivityRequest::set_action(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:activity_log.LogActivityRequest.action)
}
inline std::string* LogActivityRequest::mutable_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:activity_log.LogActivityRequest.action)
  return _s;
}
inline const std::string& LogActivityRequest::_internal_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_.Get();
}
inline void LogActivityRequest::_internal_set_action(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(value, GetArena());
}
inline std::string* LogActivityRequest::_internal_mutable_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_.Mutable( GetArena());
}
inline std::string* LogActivityRequest::release_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:activity_log.LogActivityRequest.action)
  return _impl_.action_.Release();
}
inline void LogActivityRequest::set_allocated_action(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.action_.IsDefault()) {
          _impl_.action_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:activity_log.LogActivityRequest.action)
}

// -------------------------------------------------------------------

// LogActivityResponse

// .activity_log.Status status = 1;
inline void LogActivityResponse::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::activity_log::Status LogActivityResponse::status() const {
  // @@protoc_insertion_point(field_get:activity_log.LogActivityResponse.status)
  return _internal_status();
}
inline void LogActivityResponse::set_status(::activity_log::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:activity_log.LogActivityResponse.status)
}
inline ::activity_log::Status LogActivityResponse::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::activity_log::Status>(_impl_.status_);
}
inline void LogActivityResponse::_internal_set_status(::activity_log::Status value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// optional string message = 2;
inline bool LogActivityResponse::has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LogActivityResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LogActivityResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:activity_log.LogActivityResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogActivityResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:activity_log.LogActivityResponse.message)
}
inline std::string* LogActivityResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:activity_log.LogActivityResponse.message)
  return _s;
}
inline const std::string& LogActivityResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void LogActivityResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* LogActivityResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* LogActivityResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:activity_log.LogActivityResponse.message)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.message_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void LogActivityResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:activity_log.LogActivityResponse.message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace activity_log


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::activity_log::Status> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::activity_log::Status>() {
  return ::activity_log::Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_activity_2eproto_2epb_2eh
