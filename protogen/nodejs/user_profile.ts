// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v5.28.3
// source: user_profile.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "user_profile";

export interface ProfileRequest {
}

export interface ProfileResponse {
  id: string;
  lastName: string;
  firstName: string;
  email: string;
}

export interface ProfileUpdateRequest {
  lastName?: string | undefined;
  firstName?: string | undefined;
  email?: string | undefined;
}

export interface ProfileUpdateResponse {
  id: string;
  lastName: string;
  firstName: string;
  email: string;
}

function createBaseProfileRequest(): ProfileRequest {
  return {};
}

export const ProfileRequest: MessageFns<ProfileRequest> = {
  encode(_: ProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ProfileRequest {
    return {};
  },

  toJSON(_: ProfileRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ProfileRequest>, I>>(base?: I): ProfileRequest {
    return ProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProfileRequest>, I>>(_: I): ProfileRequest {
    const message = createBaseProfileRequest();
    return message;
  },
};

function createBaseProfileResponse(): ProfileResponse {
  return { id: "", lastName: "", firstName: "", email: "" };
}

export const ProfileResponse: MessageFns<ProfileResponse> = {
  encode(message: ProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.lastName !== "") {
      writer.uint32(18).string(message.lastName);
    }
    if (message.firstName !== "") {
      writer.uint32(26).string(message.firstName);
    }
    if (message.email !== "") {
      writer.uint32(34).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProfileResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
    };
  },

  toJSON(message: ProfileResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProfileResponse>, I>>(base?: I): ProfileResponse {
    return ProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProfileResponse>, I>>(object: I): ProfileResponse {
    const message = createBaseProfileResponse();
    message.id = object.id ?? "";
    message.lastName = object.lastName ?? "";
    message.firstName = object.firstName ?? "";
    message.email = object.email ?? "";
    return message;
  },
};

function createBaseProfileUpdateRequest(): ProfileUpdateRequest {
  return { lastName: undefined, firstName: undefined, email: undefined };
}

export const ProfileUpdateRequest: MessageFns<ProfileUpdateRequest> = {
  encode(message: ProfileUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lastName !== undefined) {
      writer.uint32(18).string(message.lastName);
    }
    if (message.firstName !== undefined) {
      writer.uint32(26).string(message.firstName);
    }
    if (message.email !== undefined) {
      writer.uint32(34).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProfileUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfileUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProfileUpdateRequest {
    return {
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : undefined,
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : undefined,
      email: isSet(object.email) ? globalThis.String(object.email) : undefined,
    };
  },

  toJSON(message: ProfileUpdateRequest): unknown {
    const obj: any = {};
    if (message.lastName !== undefined) {
      obj.lastName = message.lastName;
    }
    if (message.firstName !== undefined) {
      obj.firstName = message.firstName;
    }
    if (message.email !== undefined) {
      obj.email = message.email;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProfileUpdateRequest>, I>>(base?: I): ProfileUpdateRequest {
    return ProfileUpdateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProfileUpdateRequest>, I>>(object: I): ProfileUpdateRequest {
    const message = createBaseProfileUpdateRequest();
    message.lastName = object.lastName ?? undefined;
    message.firstName = object.firstName ?? undefined;
    message.email = object.email ?? undefined;
    return message;
  },
};

function createBaseProfileUpdateResponse(): ProfileUpdateResponse {
  return { id: "", lastName: "", firstName: "", email: "" };
}

export const ProfileUpdateResponse: MessageFns<ProfileUpdateResponse> = {
  encode(message: ProfileUpdateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.lastName !== "") {
      writer.uint32(18).string(message.lastName);
    }
    if (message.firstName !== "") {
      writer.uint32(26).string(message.firstName);
    }
    if (message.email !== "") {
      writer.uint32(34).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProfileUpdateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfileUpdateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProfileUpdateResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
    };
  },

  toJSON(message: ProfileUpdateResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProfileUpdateResponse>, I>>(base?: I): ProfileUpdateResponse {
    return ProfileUpdateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProfileUpdateResponse>, I>>(object: I): ProfileUpdateResponse {
    const message = createBaseProfileUpdateResponse();
    message.id = object.id ?? "";
    message.lastName = object.lastName ?? "";
    message.firstName = object.firstName ?? "";
    message.email = object.email ?? "";
    return message;
  },
};

export type UserProfileService = typeof UserProfileService;
export const UserProfileService = {
  getProfile: {
    path: "/user_profile.UserProfile/GetProfile",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ProfileRequest) => Buffer.from(ProfileRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ProfileRequest.decode(value),
    responseSerialize: (value: ProfileResponse) => Buffer.from(ProfileResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ProfileResponse.decode(value),
  },
  updateProfile: {
    path: "/user_profile.UserProfile/UpdateProfile",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ProfileUpdateRequest) => Buffer.from(ProfileUpdateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ProfileUpdateRequest.decode(value),
    responseSerialize: (value: ProfileUpdateResponse) => Buffer.from(ProfileUpdateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ProfileUpdateResponse.decode(value),
  },
} as const;

export interface UserProfileServer extends UntypedServiceImplementation {
  getProfile: handleUnaryCall<ProfileRequest, ProfileResponse>;
  updateProfile: handleUnaryCall<ProfileUpdateRequest, ProfileUpdateResponse>;
}

export interface UserProfileClient extends Client {
  getProfile(
    request: ProfileRequest,
    callback: (error: ServiceError | null, response: ProfileResponse) => void,
  ): ClientUnaryCall;
  getProfile(
    request: ProfileRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ProfileResponse) => void,
  ): ClientUnaryCall;
  getProfile(
    request: ProfileRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ProfileResponse) => void,
  ): ClientUnaryCall;
  updateProfile(
    request: ProfileUpdateRequest,
    callback: (error: ServiceError | null, response: ProfileUpdateResponse) => void,
  ): ClientUnaryCall;
  updateProfile(
    request: ProfileUpdateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ProfileUpdateResponse) => void,
  ): ClientUnaryCall;
  updateProfile(
    request: ProfileUpdateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ProfileUpdateResponse) => void,
  ): ClientUnaryCall;
}

export const UserProfileClient = makeGenericClientConstructor(
  UserProfileService,
  "user_profile.UserProfile",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): UserProfileClient;
  service: typeof UserProfileService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
