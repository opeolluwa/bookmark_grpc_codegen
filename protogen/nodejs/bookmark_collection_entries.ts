// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v5.28.3
// source: bookmark_collection_entries.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "bookmark_collections_entries";

export interface NewBookmarkCollectionsEntryRequest {
  title: string;
  description: string;
  bookmarkCollectionId: string;
  moreFields: { [key: string]: string };
}

export interface NewBookmarkCollectionsEntryRequest_MoreFieldsEntry {
  key: string;
  value: string;
}

export interface GetBookmarkCollectionsEntryResponse {
  title: string;
  description: string;
  createdAt: string;
  updatedAt: string;
  collectionId: string;
  moreFields: { [key: string]: string };
  entryId: string;
}

export interface GetBookmarkCollectionsEntryResponse_MoreFieldsEntry {
  key: string;
  value: string;
}

export interface GetBookmarkCollectionsEntryRequest {
  collectionId: string;
  entryId: string;
}

export interface UpdateBookmarkCollectionsEntryRequest {
  collectionId: string;
  title?: string | undefined;
  description?: string | undefined;
  entryId: string;
}

export interface DeleteBookmarkCollectionsEntryResponse {
  collectionId: string;
  entryId: string;
  status: string;
}

function createBaseNewBookmarkCollectionsEntryRequest(): NewBookmarkCollectionsEntryRequest {
  return { title: "", description: "", bookmarkCollectionId: "", moreFields: {} };
}

export const NewBookmarkCollectionsEntryRequest: MessageFns<NewBookmarkCollectionsEntryRequest> = {
  encode(message: NewBookmarkCollectionsEntryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.bookmarkCollectionId !== "") {
      writer.uint32(26).string(message.bookmarkCollectionId);
    }
    Object.entries(message.moreFields).forEach(([key, value]) => {
      NewBookmarkCollectionsEntryRequest_MoreFieldsEntry.encode({ key: key as any, value }, writer.uint32(34).fork())
        .join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NewBookmarkCollectionsEntryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNewBookmarkCollectionsEntryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.bookmarkCollectionId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = NewBookmarkCollectionsEntryRequest_MoreFieldsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.moreFields[entry4.key] = entry4.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NewBookmarkCollectionsEntryRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      bookmarkCollectionId: isSet(object.bookmarkCollectionId) ? globalThis.String(object.bookmarkCollectionId) : "",
      moreFields: isObject(object.moreFields)
        ? Object.entries(object.moreFields).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: NewBookmarkCollectionsEntryRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.bookmarkCollectionId !== "") {
      obj.bookmarkCollectionId = message.bookmarkCollectionId;
    }
    if (message.moreFields) {
      const entries = Object.entries(message.moreFields);
      if (entries.length > 0) {
        obj.moreFields = {};
        entries.forEach(([k, v]) => {
          obj.moreFields[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NewBookmarkCollectionsEntryRequest>, I>>(
    base?: I,
  ): NewBookmarkCollectionsEntryRequest {
    return NewBookmarkCollectionsEntryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NewBookmarkCollectionsEntryRequest>, I>>(
    object: I,
  ): NewBookmarkCollectionsEntryRequest {
    const message = createBaseNewBookmarkCollectionsEntryRequest();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.bookmarkCollectionId = object.bookmarkCollectionId ?? "";
    message.moreFields = Object.entries(object.moreFields ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseNewBookmarkCollectionsEntryRequest_MoreFieldsEntry(): NewBookmarkCollectionsEntryRequest_MoreFieldsEntry {
  return { key: "", value: "" };
}

export const NewBookmarkCollectionsEntryRequest_MoreFieldsEntry: MessageFns<
  NewBookmarkCollectionsEntryRequest_MoreFieldsEntry
> = {
  encode(
    message: NewBookmarkCollectionsEntryRequest_MoreFieldsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NewBookmarkCollectionsEntryRequest_MoreFieldsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNewBookmarkCollectionsEntryRequest_MoreFieldsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NewBookmarkCollectionsEntryRequest_MoreFieldsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: NewBookmarkCollectionsEntryRequest_MoreFieldsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NewBookmarkCollectionsEntryRequest_MoreFieldsEntry>, I>>(
    base?: I,
  ): NewBookmarkCollectionsEntryRequest_MoreFieldsEntry {
    return NewBookmarkCollectionsEntryRequest_MoreFieldsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NewBookmarkCollectionsEntryRequest_MoreFieldsEntry>, I>>(
    object: I,
  ): NewBookmarkCollectionsEntryRequest_MoreFieldsEntry {
    const message = createBaseNewBookmarkCollectionsEntryRequest_MoreFieldsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseGetBookmarkCollectionsEntryResponse(): GetBookmarkCollectionsEntryResponse {
  return { title: "", description: "", createdAt: "", updatedAt: "", collectionId: "", moreFields: {}, entryId: "" };
}

export const GetBookmarkCollectionsEntryResponse: MessageFns<GetBookmarkCollectionsEntryResponse> = {
  encode(message: GetBookmarkCollectionsEntryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.createdAt !== "") {
      writer.uint32(26).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(34).string(message.updatedAt);
    }
    if (message.collectionId !== "") {
      writer.uint32(42).string(message.collectionId);
    }
    Object.entries(message.moreFields).forEach(([key, value]) => {
      GetBookmarkCollectionsEntryResponse_MoreFieldsEntry.encode({ key: key as any, value }, writer.uint32(50).fork())
        .join();
    });
    if (message.entryId !== "") {
      writer.uint32(66).string(message.entryId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBookmarkCollectionsEntryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBookmarkCollectionsEntryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.collectionId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          const entry6 = GetBookmarkCollectionsEntryResponse_MoreFieldsEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.moreFields[entry6.key] = entry6.value;
          }
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.entryId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBookmarkCollectionsEntryResponse {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
      collectionId: isSet(object.collectionId) ? globalThis.String(object.collectionId) : "",
      moreFields: isObject(object.moreFields)
        ? Object.entries(object.moreFields).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      entryId: isSet(object.entryId) ? globalThis.String(object.entryId) : "",
    };
  },

  toJSON(message: GetBookmarkCollectionsEntryResponse): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.collectionId !== "") {
      obj.collectionId = message.collectionId;
    }
    if (message.moreFields) {
      const entries = Object.entries(message.moreFields);
      if (entries.length > 0) {
        obj.moreFields = {};
        entries.forEach(([k, v]) => {
          obj.moreFields[k] = v;
        });
      }
    }
    if (message.entryId !== "") {
      obj.entryId = message.entryId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBookmarkCollectionsEntryResponse>, I>>(
    base?: I,
  ): GetBookmarkCollectionsEntryResponse {
    return GetBookmarkCollectionsEntryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBookmarkCollectionsEntryResponse>, I>>(
    object: I,
  ): GetBookmarkCollectionsEntryResponse {
    const message = createBaseGetBookmarkCollectionsEntryResponse();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    message.collectionId = object.collectionId ?? "";
    message.moreFields = Object.entries(object.moreFields ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.entryId = object.entryId ?? "";
    return message;
  },
};

function createBaseGetBookmarkCollectionsEntryResponse_MoreFieldsEntry(): GetBookmarkCollectionsEntryResponse_MoreFieldsEntry {
  return { key: "", value: "" };
}

export const GetBookmarkCollectionsEntryResponse_MoreFieldsEntry: MessageFns<
  GetBookmarkCollectionsEntryResponse_MoreFieldsEntry
> = {
  encode(
    message: GetBookmarkCollectionsEntryResponse_MoreFieldsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBookmarkCollectionsEntryResponse_MoreFieldsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBookmarkCollectionsEntryResponse_MoreFieldsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBookmarkCollectionsEntryResponse_MoreFieldsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: GetBookmarkCollectionsEntryResponse_MoreFieldsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBookmarkCollectionsEntryResponse_MoreFieldsEntry>, I>>(
    base?: I,
  ): GetBookmarkCollectionsEntryResponse_MoreFieldsEntry {
    return GetBookmarkCollectionsEntryResponse_MoreFieldsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBookmarkCollectionsEntryResponse_MoreFieldsEntry>, I>>(
    object: I,
  ): GetBookmarkCollectionsEntryResponse_MoreFieldsEntry {
    const message = createBaseGetBookmarkCollectionsEntryResponse_MoreFieldsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseGetBookmarkCollectionsEntryRequest(): GetBookmarkCollectionsEntryRequest {
  return { collectionId: "", entryId: "" };
}

export const GetBookmarkCollectionsEntryRequest: MessageFns<GetBookmarkCollectionsEntryRequest> = {
  encode(message: GetBookmarkCollectionsEntryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.collectionId !== "") {
      writer.uint32(10).string(message.collectionId);
    }
    if (message.entryId !== "") {
      writer.uint32(18).string(message.entryId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBookmarkCollectionsEntryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBookmarkCollectionsEntryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.collectionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.entryId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBookmarkCollectionsEntryRequest {
    return {
      collectionId: isSet(object.collectionId) ? globalThis.String(object.collectionId) : "",
      entryId: isSet(object.entryId) ? globalThis.String(object.entryId) : "",
    };
  },

  toJSON(message: GetBookmarkCollectionsEntryRequest): unknown {
    const obj: any = {};
    if (message.collectionId !== "") {
      obj.collectionId = message.collectionId;
    }
    if (message.entryId !== "") {
      obj.entryId = message.entryId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBookmarkCollectionsEntryRequest>, I>>(
    base?: I,
  ): GetBookmarkCollectionsEntryRequest {
    return GetBookmarkCollectionsEntryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBookmarkCollectionsEntryRequest>, I>>(
    object: I,
  ): GetBookmarkCollectionsEntryRequest {
    const message = createBaseGetBookmarkCollectionsEntryRequest();
    message.collectionId = object.collectionId ?? "";
    message.entryId = object.entryId ?? "";
    return message;
  },
};

function createBaseUpdateBookmarkCollectionsEntryRequest(): UpdateBookmarkCollectionsEntryRequest {
  return { collectionId: "", title: undefined, description: undefined, entryId: "" };
}

export const UpdateBookmarkCollectionsEntryRequest: MessageFns<UpdateBookmarkCollectionsEntryRequest> = {
  encode(message: UpdateBookmarkCollectionsEntryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.collectionId !== "") {
      writer.uint32(10).string(message.collectionId);
    }
    if (message.title !== undefined) {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    if (message.entryId !== "") {
      writer.uint32(34).string(message.entryId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBookmarkCollectionsEntryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBookmarkCollectionsEntryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.collectionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.entryId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBookmarkCollectionsEntryRequest {
    return {
      collectionId: isSet(object.collectionId) ? globalThis.String(object.collectionId) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      entryId: isSet(object.entryId) ? globalThis.String(object.entryId) : "",
    };
  },

  toJSON(message: UpdateBookmarkCollectionsEntryRequest): unknown {
    const obj: any = {};
    if (message.collectionId !== "") {
      obj.collectionId = message.collectionId;
    }
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.entryId !== "") {
      obj.entryId = message.entryId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateBookmarkCollectionsEntryRequest>, I>>(
    base?: I,
  ): UpdateBookmarkCollectionsEntryRequest {
    return UpdateBookmarkCollectionsEntryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateBookmarkCollectionsEntryRequest>, I>>(
    object: I,
  ): UpdateBookmarkCollectionsEntryRequest {
    const message = createBaseUpdateBookmarkCollectionsEntryRequest();
    message.collectionId = object.collectionId ?? "";
    message.title = object.title ?? undefined;
    message.description = object.description ?? undefined;
    message.entryId = object.entryId ?? "";
    return message;
  },
};

function createBaseDeleteBookmarkCollectionsEntryResponse(): DeleteBookmarkCollectionsEntryResponse {
  return { collectionId: "", entryId: "", status: "" };
}

export const DeleteBookmarkCollectionsEntryResponse: MessageFns<DeleteBookmarkCollectionsEntryResponse> = {
  encode(message: DeleteBookmarkCollectionsEntryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.collectionId !== "") {
      writer.uint32(10).string(message.collectionId);
    }
    if (message.entryId !== "") {
      writer.uint32(18).string(message.entryId);
    }
    if (message.status !== "") {
      writer.uint32(34).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteBookmarkCollectionsEntryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteBookmarkCollectionsEntryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.collectionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.entryId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteBookmarkCollectionsEntryResponse {
    return {
      collectionId: isSet(object.collectionId) ? globalThis.String(object.collectionId) : "",
      entryId: isSet(object.entryId) ? globalThis.String(object.entryId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: DeleteBookmarkCollectionsEntryResponse): unknown {
    const obj: any = {};
    if (message.collectionId !== "") {
      obj.collectionId = message.collectionId;
    }
    if (message.entryId !== "") {
      obj.entryId = message.entryId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteBookmarkCollectionsEntryResponse>, I>>(
    base?: I,
  ): DeleteBookmarkCollectionsEntryResponse {
    return DeleteBookmarkCollectionsEntryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteBookmarkCollectionsEntryResponse>, I>>(
    object: I,
  ): DeleteBookmarkCollectionsEntryResponse {
    const message = createBaseDeleteBookmarkCollectionsEntryResponse();
    message.collectionId = object.collectionId ?? "";
    message.entryId = object.entryId ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

export type BookmarkCollectionsEntriesManagerService = typeof BookmarkCollectionsEntriesManagerService;
export const BookmarkCollectionsEntriesManagerService = {
  createNewBookmarkCollectionEntry: {
    path: "/bookmark_collections_entries.BookmarkCollectionsEntriesManager/CreateNewBookmarkCollectionEntry",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: NewBookmarkCollectionsEntryRequest) =>
      Buffer.from(NewBookmarkCollectionsEntryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => NewBookmarkCollectionsEntryRequest.decode(value),
    responseSerialize: (value: GetBookmarkCollectionsEntryResponse) =>
      Buffer.from(GetBookmarkCollectionsEntryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetBookmarkCollectionsEntryResponse.decode(value),
  },
  getBookmarkCollectionEntry: {
    path: "/bookmark_collections_entries.BookmarkCollectionsEntriesManager/GetBookmarkCollectionEntry",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetBookmarkCollectionsEntryRequest) =>
      Buffer.from(GetBookmarkCollectionsEntryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetBookmarkCollectionsEntryRequest.decode(value),
    responseSerialize: (value: GetBookmarkCollectionsEntryResponse) =>
      Buffer.from(GetBookmarkCollectionsEntryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetBookmarkCollectionsEntryResponse.decode(value),
  },
  updateBookmarkCollectionEntry: {
    path: "/bookmark_collections_entries.BookmarkCollectionsEntriesManager/UpdateBookmarkCollectionEntry",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateBookmarkCollectionsEntryRequest) =>
      Buffer.from(UpdateBookmarkCollectionsEntryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateBookmarkCollectionsEntryRequest.decode(value),
    responseSerialize: (value: GetBookmarkCollectionsEntryResponse) =>
      Buffer.from(GetBookmarkCollectionsEntryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetBookmarkCollectionsEntryResponse.decode(value),
  },
  deleteBookmarkCollectionEntry: {
    path: "/bookmark_collections_entries.BookmarkCollectionsEntriesManager/DeleteBookmarkCollectionEntry",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateBookmarkCollectionsEntryRequest) =>
      Buffer.from(UpdateBookmarkCollectionsEntryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateBookmarkCollectionsEntryRequest.decode(value),
    responseSerialize: (value: DeleteBookmarkCollectionsEntryResponse) =>
      Buffer.from(DeleteBookmarkCollectionsEntryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteBookmarkCollectionsEntryResponse.decode(value),
  },
} as const;

export interface BookmarkCollectionsEntriesManagerServer extends UntypedServiceImplementation {
  createNewBookmarkCollectionEntry: handleUnaryCall<
    NewBookmarkCollectionsEntryRequest,
    GetBookmarkCollectionsEntryResponse
  >;
  getBookmarkCollectionEntry: handleUnaryCall<GetBookmarkCollectionsEntryRequest, GetBookmarkCollectionsEntryResponse>;
  updateBookmarkCollectionEntry: handleUnaryCall<
    UpdateBookmarkCollectionsEntryRequest,
    GetBookmarkCollectionsEntryResponse
  >;
  deleteBookmarkCollectionEntry: handleUnaryCall<
    UpdateBookmarkCollectionsEntryRequest,
    DeleteBookmarkCollectionsEntryResponse
  >;
}

export interface BookmarkCollectionsEntriesManagerClient extends Client {
  createNewBookmarkCollectionEntry(
    request: NewBookmarkCollectionsEntryRequest,
    callback: (error: ServiceError | null, response: GetBookmarkCollectionsEntryResponse) => void,
  ): ClientUnaryCall;
  createNewBookmarkCollectionEntry(
    request: NewBookmarkCollectionsEntryRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetBookmarkCollectionsEntryResponse) => void,
  ): ClientUnaryCall;
  createNewBookmarkCollectionEntry(
    request: NewBookmarkCollectionsEntryRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetBookmarkCollectionsEntryResponse) => void,
  ): ClientUnaryCall;
  getBookmarkCollectionEntry(
    request: GetBookmarkCollectionsEntryRequest,
    callback: (error: ServiceError | null, response: GetBookmarkCollectionsEntryResponse) => void,
  ): ClientUnaryCall;
  getBookmarkCollectionEntry(
    request: GetBookmarkCollectionsEntryRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetBookmarkCollectionsEntryResponse) => void,
  ): ClientUnaryCall;
  getBookmarkCollectionEntry(
    request: GetBookmarkCollectionsEntryRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetBookmarkCollectionsEntryResponse) => void,
  ): ClientUnaryCall;
  updateBookmarkCollectionEntry(
    request: UpdateBookmarkCollectionsEntryRequest,
    callback: (error: ServiceError | null, response: GetBookmarkCollectionsEntryResponse) => void,
  ): ClientUnaryCall;
  updateBookmarkCollectionEntry(
    request: UpdateBookmarkCollectionsEntryRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetBookmarkCollectionsEntryResponse) => void,
  ): ClientUnaryCall;
  updateBookmarkCollectionEntry(
    request: UpdateBookmarkCollectionsEntryRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetBookmarkCollectionsEntryResponse) => void,
  ): ClientUnaryCall;
  deleteBookmarkCollectionEntry(
    request: UpdateBookmarkCollectionsEntryRequest,
    callback: (error: ServiceError | null, response: DeleteBookmarkCollectionsEntryResponse) => void,
  ): ClientUnaryCall;
  deleteBookmarkCollectionEntry(
    request: UpdateBookmarkCollectionsEntryRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteBookmarkCollectionsEntryResponse) => void,
  ): ClientUnaryCall;
  deleteBookmarkCollectionEntry(
    request: UpdateBookmarkCollectionsEntryRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteBookmarkCollectionsEntryResponse) => void,
  ): ClientUnaryCall;
}

export const BookmarkCollectionsEntriesManagerClient = makeGenericClientConstructor(
  BookmarkCollectionsEntriesManagerService,
  "bookmark_collections_entries.BookmarkCollectionsEntriesManager",
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): BookmarkCollectionsEntriesManagerClient;
  service: typeof BookmarkCollectionsEntriesManagerService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
