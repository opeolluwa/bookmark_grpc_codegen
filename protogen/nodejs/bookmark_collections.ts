// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v5.28.3
// source: bookmark_collections.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "BookmarkCollection";

export interface BookmarkCollectionEntries {
  title: string;
  description: string;
  createdAt: string;
  updatedAt: string;
  BookmarkCollectionId: string;
  moreFields: { [key: string]: string };
}

export interface BookmarkCollectionEntries_MoreFieldsEntry {
  key: string;
  value: string;
}

export interface NewBookmarkCollectionRequest {
  name: string;
  description: string;
}

export interface NewBookmarkCollectionResponse {
  BookmarkCollectionId: string;
  name: string;
  description: string;
  createdAt: string;
  updatedAt: string;
}

export interface GetBookmarkCollectionRequest {
  BookmarkCollectionId: string;
}

export interface GetBookmarkCollectionResponse {
  BookmarkCollectionId: string;
  name: string;
  description: string;
  createdAt: string;
  updatedAt: string;
  entries: BookmarkCollectionEntries[];
}

export interface UpdateBookmarkCollectionRequest {
  BookmarkCollectionId: string;
  name?: string | undefined;
  description?: string | undefined;
}

export interface UpdateBookmarkCollectionResponse {
  BookmarkCollectionId: string;
  status: string;
}

export interface DeleteBookmarkCollectionRequest {
  BookmarkCollectionId: string;
}

export interface DeleteBookmarkCollectionResponse {
  BookmarkCollectionId: string;
  message: string;
}

export interface ListBookmarkCollectionsRequest {
  page: number;
  pageSize: number;
}

export interface BookmarkCollection {
  BookmarkCollectionId: string;
  name: string;
  description: string;
  createdAt: string;
  updatedAt: string;
}

export interface ListBookmarkCollectionsResponse {
  BookmarkCollections: BookmarkCollection[];
  totalCount: number;
}

export interface ListBookmarkCollectionEntryRequest {
  BookmarkCollectionId: string;
  page: number;
  pageSize: number;
}

export interface ListBookmarkCollectionEntryResponse {
  BookmarkCollectionEntries: BookmarkCollectionEntries[];
  totalCount: number;
}

function createBaseBookmarkCollectionEntries(): BookmarkCollectionEntries {
  return { title: "", description: "", createdAt: "", updatedAt: "", BookmarkCollectionId: "", moreFields: {} };
}

export const BookmarkCollectionEntries: MessageFns<BookmarkCollectionEntries> = {
  encode(message: BookmarkCollectionEntries, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.createdAt !== "") {
      writer.uint32(26).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(34).string(message.updatedAt);
    }
    if (message.BookmarkCollectionId !== "") {
      writer.uint32(42).string(message.BookmarkCollectionId);
    }
    Object.entries(message.moreFields).forEach(([key, value]) => {
      BookmarkCollectionEntries_MoreFieldsEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BookmarkCollectionEntries {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBookmarkCollectionEntries();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.BookmarkCollectionId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          const entry6 = BookmarkCollectionEntries_MoreFieldsEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.moreFields[entry6.key] = entry6.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BookmarkCollectionEntries {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
      BookmarkCollectionId: isSet(object.BookmarkCollectionId) ? globalThis.String(object.BookmarkCollectionId) : "",
      moreFields: isObject(object.moreFields)
        ? Object.entries(object.moreFields).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: BookmarkCollectionEntries): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.BookmarkCollectionId !== "") {
      obj.BookmarkCollectionId = message.BookmarkCollectionId;
    }
    if (message.moreFields) {
      const entries = Object.entries(message.moreFields);
      if (entries.length > 0) {
        obj.moreFields = {};
        entries.forEach(([k, v]) => {
          obj.moreFields[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BookmarkCollectionEntries>, I>>(base?: I): BookmarkCollectionEntries {
    return BookmarkCollectionEntries.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BookmarkCollectionEntries>, I>>(object: I): BookmarkCollectionEntries {
    const message = createBaseBookmarkCollectionEntries();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    message.BookmarkCollectionId = object.BookmarkCollectionId ?? "";
    message.moreFields = Object.entries(object.moreFields ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseBookmarkCollectionEntries_MoreFieldsEntry(): BookmarkCollectionEntries_MoreFieldsEntry {
  return { key: "", value: "" };
}

export const BookmarkCollectionEntries_MoreFieldsEntry: MessageFns<BookmarkCollectionEntries_MoreFieldsEntry> = {
  encode(message: BookmarkCollectionEntries_MoreFieldsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BookmarkCollectionEntries_MoreFieldsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBookmarkCollectionEntries_MoreFieldsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BookmarkCollectionEntries_MoreFieldsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: BookmarkCollectionEntries_MoreFieldsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BookmarkCollectionEntries_MoreFieldsEntry>, I>>(
    base?: I,
  ): BookmarkCollectionEntries_MoreFieldsEntry {
    return BookmarkCollectionEntries_MoreFieldsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BookmarkCollectionEntries_MoreFieldsEntry>, I>>(
    object: I,
  ): BookmarkCollectionEntries_MoreFieldsEntry {
    const message = createBaseBookmarkCollectionEntries_MoreFieldsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseNewBookmarkCollectionRequest(): NewBookmarkCollectionRequest {
  return { name: "", description: "" };
}

export const NewBookmarkCollectionRequest: MessageFns<NewBookmarkCollectionRequest> = {
  encode(message: NewBookmarkCollectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NewBookmarkCollectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNewBookmarkCollectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NewBookmarkCollectionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: NewBookmarkCollectionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NewBookmarkCollectionRequest>, I>>(base?: I): NewBookmarkCollectionRequest {
    return NewBookmarkCollectionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NewBookmarkCollectionRequest>, I>>(object: I): NewBookmarkCollectionRequest {
    const message = createBaseNewBookmarkCollectionRequest();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseNewBookmarkCollectionResponse(): NewBookmarkCollectionResponse {
  return { BookmarkCollectionId: "", name: "", description: "", createdAt: "", updatedAt: "" };
}

export const NewBookmarkCollectionResponse: MessageFns<NewBookmarkCollectionResponse> = {
  encode(message: NewBookmarkCollectionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.BookmarkCollectionId !== "") {
      writer.uint32(10).string(message.BookmarkCollectionId);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.createdAt !== "") {
      writer.uint32(42).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(50).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NewBookmarkCollectionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNewBookmarkCollectionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.BookmarkCollectionId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NewBookmarkCollectionResponse {
    return {
      BookmarkCollectionId: isSet(object.BookmarkCollectionId) ? globalThis.String(object.BookmarkCollectionId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: NewBookmarkCollectionResponse): unknown {
    const obj: any = {};
    if (message.BookmarkCollectionId !== "") {
      obj.BookmarkCollectionId = message.BookmarkCollectionId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NewBookmarkCollectionResponse>, I>>(base?: I): NewBookmarkCollectionResponse {
    return NewBookmarkCollectionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NewBookmarkCollectionResponse>, I>>(
    object: I,
  ): NewBookmarkCollectionResponse {
    const message = createBaseNewBookmarkCollectionResponse();
    message.BookmarkCollectionId = object.BookmarkCollectionId ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

function createBaseGetBookmarkCollectionRequest(): GetBookmarkCollectionRequest {
  return { BookmarkCollectionId: "" };
}

export const GetBookmarkCollectionRequest: MessageFns<GetBookmarkCollectionRequest> = {
  encode(message: GetBookmarkCollectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.BookmarkCollectionId !== "") {
      writer.uint32(10).string(message.BookmarkCollectionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBookmarkCollectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBookmarkCollectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.BookmarkCollectionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBookmarkCollectionRequest {
    return {
      BookmarkCollectionId: isSet(object.BookmarkCollectionId) ? globalThis.String(object.BookmarkCollectionId) : "",
    };
  },

  toJSON(message: GetBookmarkCollectionRequest): unknown {
    const obj: any = {};
    if (message.BookmarkCollectionId !== "") {
      obj.BookmarkCollectionId = message.BookmarkCollectionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBookmarkCollectionRequest>, I>>(base?: I): GetBookmarkCollectionRequest {
    return GetBookmarkCollectionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBookmarkCollectionRequest>, I>>(object: I): GetBookmarkCollectionRequest {
    const message = createBaseGetBookmarkCollectionRequest();
    message.BookmarkCollectionId = object.BookmarkCollectionId ?? "";
    return message;
  },
};

function createBaseGetBookmarkCollectionResponse(): GetBookmarkCollectionResponse {
  return { BookmarkCollectionId: "", name: "", description: "", createdAt: "", updatedAt: "", entries: [] };
}

export const GetBookmarkCollectionResponse: MessageFns<GetBookmarkCollectionResponse> = {
  encode(message: GetBookmarkCollectionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.BookmarkCollectionId !== "") {
      writer.uint32(10).string(message.BookmarkCollectionId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(42).string(message.updatedAt);
    }
    for (const v of message.entries) {
      BookmarkCollectionEntries.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBookmarkCollectionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBookmarkCollectionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.BookmarkCollectionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.entries.push(BookmarkCollectionEntries.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBookmarkCollectionResponse {
    return {
      BookmarkCollectionId: isSet(object.BookmarkCollectionId) ? globalThis.String(object.BookmarkCollectionId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
      entries: globalThis.Array.isArray(object?.entries)
        ? object.entries.map((e: any) => BookmarkCollectionEntries.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetBookmarkCollectionResponse): unknown {
    const obj: any = {};
    if (message.BookmarkCollectionId !== "") {
      obj.BookmarkCollectionId = message.BookmarkCollectionId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => BookmarkCollectionEntries.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBookmarkCollectionResponse>, I>>(base?: I): GetBookmarkCollectionResponse {
    return GetBookmarkCollectionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBookmarkCollectionResponse>, I>>(
    object: I,
  ): GetBookmarkCollectionResponse {
    const message = createBaseGetBookmarkCollectionResponse();
    message.BookmarkCollectionId = object.BookmarkCollectionId ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    message.entries = object.entries?.map((e) => BookmarkCollectionEntries.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateBookmarkCollectionRequest(): UpdateBookmarkCollectionRequest {
  return { BookmarkCollectionId: "", name: undefined, description: undefined };
}

export const UpdateBookmarkCollectionRequest: MessageFns<UpdateBookmarkCollectionRequest> = {
  encode(message: UpdateBookmarkCollectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.BookmarkCollectionId !== "") {
      writer.uint32(10).string(message.BookmarkCollectionId);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBookmarkCollectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBookmarkCollectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.BookmarkCollectionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBookmarkCollectionRequest {
    return {
      BookmarkCollectionId: isSet(object.BookmarkCollectionId) ? globalThis.String(object.BookmarkCollectionId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
    };
  },

  toJSON(message: UpdateBookmarkCollectionRequest): unknown {
    const obj: any = {};
    if (message.BookmarkCollectionId !== "") {
      obj.BookmarkCollectionId = message.BookmarkCollectionId;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateBookmarkCollectionRequest>, I>>(base?: I): UpdateBookmarkCollectionRequest {
    return UpdateBookmarkCollectionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateBookmarkCollectionRequest>, I>>(
    object: I,
  ): UpdateBookmarkCollectionRequest {
    const message = createBaseUpdateBookmarkCollectionRequest();
    message.BookmarkCollectionId = object.BookmarkCollectionId ?? "";
    message.name = object.name ?? undefined;
    message.description = object.description ?? undefined;
    return message;
  },
};

function createBaseUpdateBookmarkCollectionResponse(): UpdateBookmarkCollectionResponse {
  return { BookmarkCollectionId: "", status: "" };
}

export const UpdateBookmarkCollectionResponse: MessageFns<UpdateBookmarkCollectionResponse> = {
  encode(message: UpdateBookmarkCollectionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.BookmarkCollectionId !== "") {
      writer.uint32(10).string(message.BookmarkCollectionId);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBookmarkCollectionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBookmarkCollectionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.BookmarkCollectionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBookmarkCollectionResponse {
    return {
      BookmarkCollectionId: isSet(object.BookmarkCollectionId) ? globalThis.String(object.BookmarkCollectionId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: UpdateBookmarkCollectionResponse): unknown {
    const obj: any = {};
    if (message.BookmarkCollectionId !== "") {
      obj.BookmarkCollectionId = message.BookmarkCollectionId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateBookmarkCollectionResponse>, I>>(
    base?: I,
  ): UpdateBookmarkCollectionResponse {
    return UpdateBookmarkCollectionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateBookmarkCollectionResponse>, I>>(
    object: I,
  ): UpdateBookmarkCollectionResponse {
    const message = createBaseUpdateBookmarkCollectionResponse();
    message.BookmarkCollectionId = object.BookmarkCollectionId ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseDeleteBookmarkCollectionRequest(): DeleteBookmarkCollectionRequest {
  return { BookmarkCollectionId: "" };
}

export const DeleteBookmarkCollectionRequest: MessageFns<DeleteBookmarkCollectionRequest> = {
  encode(message: DeleteBookmarkCollectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.BookmarkCollectionId !== "") {
      writer.uint32(10).string(message.BookmarkCollectionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteBookmarkCollectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteBookmarkCollectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.BookmarkCollectionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteBookmarkCollectionRequest {
    return {
      BookmarkCollectionId: isSet(object.BookmarkCollectionId) ? globalThis.String(object.BookmarkCollectionId) : "",
    };
  },

  toJSON(message: DeleteBookmarkCollectionRequest): unknown {
    const obj: any = {};
    if (message.BookmarkCollectionId !== "") {
      obj.BookmarkCollectionId = message.BookmarkCollectionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteBookmarkCollectionRequest>, I>>(base?: I): DeleteBookmarkCollectionRequest {
    return DeleteBookmarkCollectionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteBookmarkCollectionRequest>, I>>(
    object: I,
  ): DeleteBookmarkCollectionRequest {
    const message = createBaseDeleteBookmarkCollectionRequest();
    message.BookmarkCollectionId = object.BookmarkCollectionId ?? "";
    return message;
  },
};

function createBaseDeleteBookmarkCollectionResponse(): DeleteBookmarkCollectionResponse {
  return { BookmarkCollectionId: "", message: "" };
}

export const DeleteBookmarkCollectionResponse: MessageFns<DeleteBookmarkCollectionResponse> = {
  encode(message: DeleteBookmarkCollectionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.BookmarkCollectionId !== "") {
      writer.uint32(10).string(message.BookmarkCollectionId);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteBookmarkCollectionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteBookmarkCollectionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.BookmarkCollectionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteBookmarkCollectionResponse {
    return {
      BookmarkCollectionId: isSet(object.BookmarkCollectionId) ? globalThis.String(object.BookmarkCollectionId) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: DeleteBookmarkCollectionResponse): unknown {
    const obj: any = {};
    if (message.BookmarkCollectionId !== "") {
      obj.BookmarkCollectionId = message.BookmarkCollectionId;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteBookmarkCollectionResponse>, I>>(
    base?: I,
  ): DeleteBookmarkCollectionResponse {
    return DeleteBookmarkCollectionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteBookmarkCollectionResponse>, I>>(
    object: I,
  ): DeleteBookmarkCollectionResponse {
    const message = createBaseDeleteBookmarkCollectionResponse();
    message.BookmarkCollectionId = object.BookmarkCollectionId ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseListBookmarkCollectionsRequest(): ListBookmarkCollectionsRequest {
  return { page: 0, pageSize: 0 };
}

export const ListBookmarkCollectionsRequest: MessageFns<ListBookmarkCollectionsRequest> = {
  encode(message: ListBookmarkCollectionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).uint32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).uint32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBookmarkCollectionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBookmarkCollectionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBookmarkCollectionsRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListBookmarkCollectionsRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListBookmarkCollectionsRequest>, I>>(base?: I): ListBookmarkCollectionsRequest {
    return ListBookmarkCollectionsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListBookmarkCollectionsRequest>, I>>(
    object: I,
  ): ListBookmarkCollectionsRequest {
    const message = createBaseListBookmarkCollectionsRequest();
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseBookmarkCollection(): BookmarkCollection {
  return { BookmarkCollectionId: "", name: "", description: "", createdAt: "", updatedAt: "" };
}

export const BookmarkCollection: MessageFns<BookmarkCollection> = {
  encode(message: BookmarkCollection, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.BookmarkCollectionId !== "") {
      writer.uint32(10).string(message.BookmarkCollectionId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(42).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BookmarkCollection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBookmarkCollection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.BookmarkCollectionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BookmarkCollection {
    return {
      BookmarkCollectionId: isSet(object.BookmarkCollectionId) ? globalThis.String(object.BookmarkCollectionId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: BookmarkCollection): unknown {
    const obj: any = {};
    if (message.BookmarkCollectionId !== "") {
      obj.BookmarkCollectionId = message.BookmarkCollectionId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BookmarkCollection>, I>>(base?: I): BookmarkCollection {
    return BookmarkCollection.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BookmarkCollection>, I>>(object: I): BookmarkCollection {
    const message = createBaseBookmarkCollection();
    message.BookmarkCollectionId = object.BookmarkCollectionId ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

function createBaseListBookmarkCollectionsResponse(): ListBookmarkCollectionsResponse {
  return { BookmarkCollections: [], totalCount: 0 };
}

export const ListBookmarkCollectionsResponse: MessageFns<ListBookmarkCollectionsResponse> = {
  encode(message: ListBookmarkCollectionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.BookmarkCollections) {
      BookmarkCollection.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).uint32(message.totalCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBookmarkCollectionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBookmarkCollectionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.BookmarkCollections.push(BookmarkCollection.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBookmarkCollectionsResponse {
    return {
      BookmarkCollections: globalThis.Array.isArray(object?.BookmarkCollections)
        ? object.BookmarkCollections.map((e: any) => BookmarkCollection.fromJSON(e))
        : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
    };
  },

  toJSON(message: ListBookmarkCollectionsResponse): unknown {
    const obj: any = {};
    if (message.BookmarkCollections?.length) {
      obj.BookmarkCollections = message.BookmarkCollections.map((e) => BookmarkCollection.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListBookmarkCollectionsResponse>, I>>(base?: I): ListBookmarkCollectionsResponse {
    return ListBookmarkCollectionsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListBookmarkCollectionsResponse>, I>>(
    object: I,
  ): ListBookmarkCollectionsResponse {
    const message = createBaseListBookmarkCollectionsResponse();
    message.BookmarkCollections = object.BookmarkCollections?.map((e) => BookmarkCollection.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    return message;
  },
};

function createBaseListBookmarkCollectionEntryRequest(): ListBookmarkCollectionEntryRequest {
  return { BookmarkCollectionId: "", page: 0, pageSize: 0 };
}

export const ListBookmarkCollectionEntryRequest: MessageFns<ListBookmarkCollectionEntryRequest> = {
  encode(message: ListBookmarkCollectionEntryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.BookmarkCollectionId !== "") {
      writer.uint32(10).string(message.BookmarkCollectionId);
    }
    if (message.page !== 0) {
      writer.uint32(32).uint32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(40).uint32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBookmarkCollectionEntryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBookmarkCollectionEntryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.BookmarkCollectionId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.page = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.pageSize = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBookmarkCollectionEntryRequest {
    return {
      BookmarkCollectionId: isSet(object.BookmarkCollectionId) ? globalThis.String(object.BookmarkCollectionId) : "",
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListBookmarkCollectionEntryRequest): unknown {
    const obj: any = {};
    if (message.BookmarkCollectionId !== "") {
      obj.BookmarkCollectionId = message.BookmarkCollectionId;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListBookmarkCollectionEntryRequest>, I>>(
    base?: I,
  ): ListBookmarkCollectionEntryRequest {
    return ListBookmarkCollectionEntryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListBookmarkCollectionEntryRequest>, I>>(
    object: I,
  ): ListBookmarkCollectionEntryRequest {
    const message = createBaseListBookmarkCollectionEntryRequest();
    message.BookmarkCollectionId = object.BookmarkCollectionId ?? "";
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListBookmarkCollectionEntryResponse(): ListBookmarkCollectionEntryResponse {
  return { BookmarkCollectionEntries: [], totalCount: 0 };
}

export const ListBookmarkCollectionEntryResponse: MessageFns<ListBookmarkCollectionEntryResponse> = {
  encode(message: ListBookmarkCollectionEntryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.BookmarkCollectionEntries) {
      BookmarkCollectionEntries.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).uint32(message.totalCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBookmarkCollectionEntryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBookmarkCollectionEntryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.BookmarkCollectionEntries.push(BookmarkCollectionEntries.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBookmarkCollectionEntryResponse {
    return {
      BookmarkCollectionEntries: globalThis.Array.isArray(object?.BookmarkCollectionEntries)
        ? object.BookmarkCollectionEntries.map((e: any) => BookmarkCollectionEntries.fromJSON(e))
        : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
    };
  },

  toJSON(message: ListBookmarkCollectionEntryResponse): unknown {
    const obj: any = {};
    if (message.BookmarkCollectionEntries?.length) {
      obj.BookmarkCollectionEntries = message.BookmarkCollectionEntries.map((e) => BookmarkCollectionEntries.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListBookmarkCollectionEntryResponse>, I>>(
    base?: I,
  ): ListBookmarkCollectionEntryResponse {
    return ListBookmarkCollectionEntryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListBookmarkCollectionEntryResponse>, I>>(
    object: I,
  ): ListBookmarkCollectionEntryResponse {
    const message = createBaseListBookmarkCollectionEntryResponse();
    message.BookmarkCollectionEntries =
      object.BookmarkCollectionEntries?.map((e) => BookmarkCollectionEntries.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    return message;
  },
};

export type BookmarkCollectionManagerService = typeof BookmarkCollectionManagerService;
export const BookmarkCollectionManagerService = {
  createNewBookmarkCollection: {
    path: "/BookmarkCollection.BookmarkCollectionManager/CreateNewBookmarkCollection",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: NewBookmarkCollectionRequest) =>
      Buffer.from(NewBookmarkCollectionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => NewBookmarkCollectionRequest.decode(value),
    responseSerialize: (value: NewBookmarkCollectionResponse) =>
      Buffer.from(NewBookmarkCollectionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => NewBookmarkCollectionResponse.decode(value),
  },
  getBookmarkCollection: {
    path: "/BookmarkCollection.BookmarkCollectionManager/GetBookmarkCollection",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetBookmarkCollectionRequest) =>
      Buffer.from(GetBookmarkCollectionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetBookmarkCollectionRequest.decode(value),
    responseSerialize: (value: GetBookmarkCollectionResponse) =>
      Buffer.from(GetBookmarkCollectionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetBookmarkCollectionResponse.decode(value),
  },
  updateBookmarkCollection: {
    path: "/BookmarkCollection.BookmarkCollectionManager/UpdateBookmarkCollection",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateBookmarkCollectionRequest) =>
      Buffer.from(UpdateBookmarkCollectionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateBookmarkCollectionRequest.decode(value),
    responseSerialize: (value: GetBookmarkCollectionResponse) =>
      Buffer.from(GetBookmarkCollectionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetBookmarkCollectionResponse.decode(value),
  },
  deleteBookmarkCollection: {
    path: "/BookmarkCollection.BookmarkCollectionManager/DeleteBookmarkCollection",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteBookmarkCollectionRequest) =>
      Buffer.from(DeleteBookmarkCollectionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteBookmarkCollectionRequest.decode(value),
    responseSerialize: (value: DeleteBookmarkCollectionResponse) =>
      Buffer.from(DeleteBookmarkCollectionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteBookmarkCollectionResponse.decode(value),
  },
  listBookmarkCollections: {
    path: "/BookmarkCollection.BookmarkCollectionManager/ListBookmarkCollections",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListBookmarkCollectionsRequest) =>
      Buffer.from(ListBookmarkCollectionsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListBookmarkCollectionsRequest.decode(value),
    responseSerialize: (value: ListBookmarkCollectionsResponse) =>
      Buffer.from(ListBookmarkCollectionsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListBookmarkCollectionsResponse.decode(value),
  },
  listBookmarkCollectionEntries: {
    path: "/BookmarkCollection.BookmarkCollectionManager/ListBookmarkCollectionEntries",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListBookmarkCollectionEntryRequest) =>
      Buffer.from(ListBookmarkCollectionEntryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListBookmarkCollectionEntryRequest.decode(value),
    responseSerialize: (value: ListBookmarkCollectionEntryResponse) =>
      Buffer.from(ListBookmarkCollectionEntryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListBookmarkCollectionEntryResponse.decode(value),
  },
} as const;

export interface BookmarkCollectionManagerServer extends UntypedServiceImplementation {
  createNewBookmarkCollection: handleUnaryCall<NewBookmarkCollectionRequest, NewBookmarkCollectionResponse>;
  getBookmarkCollection: handleUnaryCall<GetBookmarkCollectionRequest, GetBookmarkCollectionResponse>;
  updateBookmarkCollection: handleUnaryCall<UpdateBookmarkCollectionRequest, GetBookmarkCollectionResponse>;
  deleteBookmarkCollection: handleUnaryCall<DeleteBookmarkCollectionRequest, DeleteBookmarkCollectionResponse>;
  listBookmarkCollections: handleUnaryCall<ListBookmarkCollectionsRequest, ListBookmarkCollectionsResponse>;
  listBookmarkCollectionEntries: handleUnaryCall<
    ListBookmarkCollectionEntryRequest,
    ListBookmarkCollectionEntryResponse
  >;
}

export interface BookmarkCollectionManagerClient extends Client {
  createNewBookmarkCollection(
    request: NewBookmarkCollectionRequest,
    callback: (error: ServiceError | null, response: NewBookmarkCollectionResponse) => void,
  ): ClientUnaryCall;
  createNewBookmarkCollection(
    request: NewBookmarkCollectionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: NewBookmarkCollectionResponse) => void,
  ): ClientUnaryCall;
  createNewBookmarkCollection(
    request: NewBookmarkCollectionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: NewBookmarkCollectionResponse) => void,
  ): ClientUnaryCall;
  getBookmarkCollection(
    request: GetBookmarkCollectionRequest,
    callback: (error: ServiceError | null, response: GetBookmarkCollectionResponse) => void,
  ): ClientUnaryCall;
  getBookmarkCollection(
    request: GetBookmarkCollectionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetBookmarkCollectionResponse) => void,
  ): ClientUnaryCall;
  getBookmarkCollection(
    request: GetBookmarkCollectionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetBookmarkCollectionResponse) => void,
  ): ClientUnaryCall;
  updateBookmarkCollection(
    request: UpdateBookmarkCollectionRequest,
    callback: (error: ServiceError | null, response: GetBookmarkCollectionResponse) => void,
  ): ClientUnaryCall;
  updateBookmarkCollection(
    request: UpdateBookmarkCollectionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetBookmarkCollectionResponse) => void,
  ): ClientUnaryCall;
  updateBookmarkCollection(
    request: UpdateBookmarkCollectionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetBookmarkCollectionResponse) => void,
  ): ClientUnaryCall;
  deleteBookmarkCollection(
    request: DeleteBookmarkCollectionRequest,
    callback: (error: ServiceError | null, response: DeleteBookmarkCollectionResponse) => void,
  ): ClientUnaryCall;
  deleteBookmarkCollection(
    request: DeleteBookmarkCollectionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteBookmarkCollectionResponse) => void,
  ): ClientUnaryCall;
  deleteBookmarkCollection(
    request: DeleteBookmarkCollectionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteBookmarkCollectionResponse) => void,
  ): ClientUnaryCall;
  listBookmarkCollections(
    request: ListBookmarkCollectionsRequest,
    callback: (error: ServiceError | null, response: ListBookmarkCollectionsResponse) => void,
  ): ClientUnaryCall;
  listBookmarkCollections(
    request: ListBookmarkCollectionsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListBookmarkCollectionsResponse) => void,
  ): ClientUnaryCall;
  listBookmarkCollections(
    request: ListBookmarkCollectionsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListBookmarkCollectionsResponse) => void,
  ): ClientUnaryCall;
  listBookmarkCollectionEntries(
    request: ListBookmarkCollectionEntryRequest,
    callback: (error: ServiceError | null, response: ListBookmarkCollectionEntryResponse) => void,
  ): ClientUnaryCall;
  listBookmarkCollectionEntries(
    request: ListBookmarkCollectionEntryRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListBookmarkCollectionEntryResponse) => void,
  ): ClientUnaryCall;
  listBookmarkCollectionEntries(
    request: ListBookmarkCollectionEntryRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListBookmarkCollectionEntryResponse) => void,
  ): ClientUnaryCall;
}

export const BookmarkCollectionManagerClient = makeGenericClientConstructor(
  BookmarkCollectionManagerService,
  "BookmarkCollection.BookmarkCollectionManager",
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): BookmarkCollectionManagerClient;
  service: typeof BookmarkCollectionManagerService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
